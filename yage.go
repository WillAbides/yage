// Copyright 2021 Google LLC
// Copyright 2021 Sylvain Rabot
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
	"runtime"
	"runtime/debug"
	"strings"

	"filippo.io/age"
	"filippo.io/age/agessh"
	"filippo.io/age/armor"
	flag "github.com/spf13/pflag"
	"golang.org/x/term"
	yage "sylr.dev/yaml/age/v3"
	"sylr.dev/yaml/v3"
)

type multiFlag []string

func (f *multiFlag) String() string { return fmt.Sprint(*f) }

func (f *multiFlag) Set(value string) error {
	*f = append(*f, value)
	return nil
}

func (f *multiFlag) Type() string {
	return "string"
}

func (f *multiFlag) Append(value string) error {
	*f = append(*f, value)
	return nil
}

const usage = `Usage:
    yage (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]
    yage --passphrase [--armor] [-o OUTPUT] [INPUT]
    yage --decrypt [-i PATH]... [-o OUTPUT] [INPUT]

Options:
    -o, --output OUTPUT         Write the result to the file at path OUTPUT.
    -a, --armor                 Encrypt to a PEM encoded format.
    -p, --passphrase            Encrypt with a passphrase.
    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.
    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.
    -d, --decrypt               Decrypt the input to the output.
    -i, --identity PATH         Use the identity file at PATH. Can be repeated.
        --version
    -y, --yaml                  Treat input as YAML and perform in-place encryption / decryption.
        --yaml-discard-notag    Does not honour NoTag attribute when decrypting (useful for re-keying).
		--yaml-update      		Updates a yaml file encrypting unencrypted values and leaving encrypted values untouched.
        --rekey                 Decrypt the input and encrypt it with the given recipients.
                                In re-keying mode the input and output can be the same file.
                                In YAML mode it implies --yaml-discard-notag. By default if no -o option
                                is given yage will overwrite input file.

INPUT defaults to standard input, and OUTPUT defaults to standard output.

RECIPIENT can be an age public key generated by age-keygen ("age1...") or an SSH public key ("ssh-ed25519 AAAA...", "ssh-rsa AAAA...").

Recipient files contain one or more recipients, one per line. Empty lines and lines starting with "#" are ignored as comments.
"-" may be used to read recipients from standard input.

Identity files contain one or more secret keys ("AGE-SECRET-KEY-1..."), one per line, or an SSH key. Empty lines and lines
starting with "#" are ignored as comments. Multiple key files can be provided, and any unused ones will be ignored.
"-" may be used to read identities from standard input.

Examples:

    # Generate age key pair
    $ age-keygen -o key.txt
    Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p

    # Tar folder and encrypt it with yage
    $ tar cvz ~/data | yage -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p > data.tar.gz.age
    $ yage --decrypt -i key.txt -o data.tar.gz data.tar.gz.age

    # Encrypt YAML keys in place tagged with !crypto/age
    $ yage -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p -y config.yaml > config.yaml.age

    # Decrypt YAML file encrypted with yage
    $ yage --decrypt -i key.txt --yaml config.yaml.age

    # Re-key age encrypted YAML
    $ yage --rekey --yaml -i key.txt -R ~/.ssh/id_ed25519.pub -R ~/.ssh/id_rsa.pub config.yaml.age
`

// Version can be set at link time to override debug.BuildInfo.Main.Version,
// which is "(devel)" when building from within the module. See
// golang.org/issue/29814 and golang.org/issue/29228.
var Version string

func main() {
	log.SetFlags(0)
	flag.Usage = func() { fmt.Fprintf(os.Stderr, "%s\n", usage) }

	if len(os.Args) == 1 {
		flag.Usage()
		os.Exit(1)
	}

	var (
		outFlag                                        string
		decryptFlag, encryptFlag, armorFlag            bool
		passFlag, versionFlag                          bool
		yamlFlag, yamlDiscardNotagFlag, yamlUpdateFlag bool
		rekeyFlag                                      bool
		recipientFlags, identityFlags                  multiFlag
		recipientsFileFlags                            multiFlag
	)

	flag.BoolVar(&versionFlag, "version", false, "print the version")
	flag.BoolVarP(&decryptFlag, "decrypt", "d", false, "decrypt the input")
	flag.BoolVarP(&encryptFlag, "encrypt", "e", false, "encrypt the input")
	flag.BoolVar(&rekeyFlag, "rekey", false, "rekey the input")
	flag.BoolVarP(&passFlag, "passphrase", "p", false, "use a passphrase")
	flag.StringVarP(&outFlag, "output", "o", "", "output to `FILE` (default stdout)")
	flag.BoolVarP(&armorFlag, "armor", "a", false, "generate an armored file")
	flag.VarP(&recipientFlags, "recipient", "r", "recipient (can be repeated)")
	flag.VarP(&recipientsFileFlags, "recipients-file", "R", "recipients file (can be repeated)")
	flag.VarP(&identityFlags, "identity", "i", "identity (can be repeated)")
	flag.BoolVarP(&yamlFlag, "yaml", "y", false, "in-place yaml encrypting/decrypting")
	flag.BoolVar(&yamlDiscardNotagFlag, "yaml-discard-notag", false, "do not honour NoTag YAML tag attribute")
	flag.BoolVar(&yamlUpdateFlag, "yaml-update", false, "update yaml file encrypting unencrypted values and leaving encrypted values untouched")
	flag.Parse()

	if versionFlag {
		if Version != "" {
			fmt.Printf("%s (%s)\n", Version, runtime.Version())
			for _, mod := range getModsVersion() {
				fmt.Fprintf(os.Stderr, "%s\n", mod)
			}
			return
		}
		if buildInfo, ok := debug.ReadBuildInfo(); ok {
			fmt.Println(buildInfo.Main.Version)
			return
		}
		fmt.Println("(unknown)")
		return
	}

	if flag.NArg() > 1 {
		logFatalf("Error: too many arguments.\n" +
			"age accepts a single optional argument for the input file.")
	}

	switch {
	case rekeyFlag, yamlUpdateFlag:
	case decryptFlag:
		if armorFlag {
			logFatalf("Error: -a/--armor can't be used with -d/--decrypt.\n" +
				"Note that armored files are detected automatically.")
		}
		if passFlag {
			logFatalf("Error: -p/--passphrase can't be used with -d/--decrypt.\n" +
				"Note that password protected files are detected automatically.")
		}
		if len(recipientFlags) > 0 {
			logFatalf("Error: -r/--recipient can't be used with -d/--decrypt.\n" +
				"Did you mean to use -i/--identity to specify a private key?")
		}
		if len(recipientsFileFlags) > 0 {
			logFatalf("Error: -R/--recipients-file can't be used with -d/--decrypt.\n" +
				"Did you mean to use -i/--identity to specify a private key?")
		}
	default: // encrypt
		if len(identityFlags) > 0 && !encryptFlag {
			logFatalf("Error: -i/--identity can't be used in encryption mode unless symmetric encryption is explicitly selected with -e/--encrypt.\n" +
				"Did you forget to specify -d/--decrypt?")
		}
		if len(recipientFlags)+len(recipientsFileFlags)+len(identityFlags) == 0 && !passFlag {
			logFatalf("Error: missing recipients.\n" +
				"Did you forget to specify -r/--recipient, -R/--recipients-file or -p/--passphrase?")
		}
		if len(recipientFlags) > 0 && passFlag {
			logFatalf("Error: -p/--passphrase can't be combined with -r/--recipient.")
		}
		if len(recipientsFileFlags) > 0 && passFlag {
			logFatalf("Error: -p/--passphrase can't be combined with -R/--recipients-file.")
		}
		if len(identityFlags) > 0 && passFlag {
			errorf("-p/--passphrase can't be combined with -i/--identity")
		}
		if yamlFlag {
			armorFlag = true
		}
	}

	var in io.Reader = os.Stdin
	var out io.Writer = os.Stdout
	inputName := flag.Arg(0)
	outputName := outFlag

	if inputName != "" && inputName != "-" {
		f, err := os.Open(inputName)
		if err != nil {
			logFatalf("Error: failed to open input file %q: %v", inputName, err)
		}
		defer f.Close()
		in = f
	} else {
		stdinInUse = true
	}

	// --rekey overwrite input file if no output file given
	if (rekeyFlag || yamlUpdateFlag) && outputName == "" {
		outputName = inputName
	}

	if outputName != "" && outputName != "-" {
		overwrite := false

		if !stdinInUse {
			istat, err := os.Stat(inputName)
			if err != nil {
				logFatalf("Error: failed to open input file %q: %v", inputName, err)
			}
			ostat, err := os.Stat(outputName)
			if (rekeyFlag || yamlUpdateFlag) && err == nil && os.SameFile(istat, ostat) {
				// in rekey mode we allow to overwrite the input file
				overwrite = true
			} else if err == nil {
				logFatalf("Error: output file %q exists", outputName)
			}
		}
		f := newLazyOpener(outputName, overwrite)
		defer f.Close()
		out = f
	} else if term.IsTerminal(int(os.Stdout.Fd())) {
		if outputName != "-" {
			if decryptFlag {
				// TODO: buffer the output and check it's printable.
			} else if !armorFlag {
				// If the output wouldn't be armored, refuse to send binary to
				// the terminal unless explicitly requested with "-o -".
				logFatalf("Error: refusing to output binary to the term.\n" +
					`Did you mean to use -a/--armor? Force with "-o -".`)
			}
		}
		if in == os.Stdin && term.IsTerminal(int(os.Stdin.Fd())) {
			// If the input comes from a TTY and output will go to a TTY,
			// buffer it up so it doesn't get in the way of typing the input.
			buf := &bytes.Buffer{}
			defer func() { io.Copy(os.Stdout, buf) }() // nolint:errcheck
			out = buf
		}
	}

	switch {
	case rekeyFlag:
		outbuf := &bytes.Buffer{}
		if yamlFlag {
			decryptYAML(identityFlags, in, outbuf, true)
		} else {
			decrypt(identityFlags, in, outbuf)
		}
		encryptKeys(recipientFlags, recipientsFileFlags, identityFlags, outbuf, out, armorFlag, yamlFlag, yamlUpdateFlag)
	case decryptFlag:
		if yamlFlag {
			decryptYAML(identityFlags, in, out, yamlDiscardNotagFlag)
		} else {
			decrypt(identityFlags, in, out)
		}
	case passFlag:
		pass, err := passphrasePromptForEncryption()
		if err != nil {
			logFatalf("Error: %v", err)
		}
		encryptPass(pass, in, out, armorFlag, yamlFlag, yamlUpdateFlag)
	default:
		encryptKeys(recipientFlags, recipientsFileFlags, identityFlags, in, out, armorFlag, yamlFlag, yamlUpdateFlag)
	}
}

func passphrasePromptForEncryption() (string, error) {
	pass, err := readPassphrase("Enter passphrase (leave empty to autogenerate a secure one):")
	if err != nil {
		return "", fmt.Errorf("could not read passphrase: %v", err)
	}
	p := string(pass)
	if p == "" {
		var words []string
		for i := 0; i < 10; i++ {
			words = append(words, randomWord())
		}
		p = strings.Join(words, "-")
		// TODO: consider printing this to the terminal, instead of stderr.
		fmt.Fprintf(os.Stderr, "Using the autogenerated passphrase %q.\n", p)
	} else {
		confirm, err := readPassphrase("Confirm passphrase:")
		if err != nil {
			return "", fmt.Errorf("could not read passphrase: %v", err)
		}
		if string(confirm) != p {
			return "", fmt.Errorf("passphrases didn't match")
		}
	}
	return p, nil
}

func encryptKeys(keys, files, identities []string, in io.Reader, out io.Writer, armor bool, yaml, yamlUpdate bool) {
	var recipients []age.Recipient
	for _, arg := range keys {
		r, err := parseRecipient(arg)
		if err, ok := err.(gitHubRecipientError); ok {
			errorWithHint(err.Error(), "instead, use recipient files like",
				"    curl -O https://github.com/"+err.username+".keys",
				"    yage -R "+err.username+".keys")
		}
		if err != nil {
			logFatalf("Error: %v", err)
		}
		recipients = append(recipients, r)
	}
	for _, name := range files {
		recs, err := parseRecipientsFile(name)
		if err != nil {
			logFatalf("Error: failed to parse recipient file %q: %v", name, err)
		}
		recipients = append(recipients, recs...)
	}
	for _, name := range identities {
		ids, err := parseIdentitiesFile(name)
		if err != nil {
			logFatalf("Error reading %q: %v", name, err)
		}
		r, err := identitiesToRecipients(ids)
		if err != nil {
			errorf("internal error processing %q: %v", name, err)
		}
		recipients = append(recipients, r...)
	}

	if yaml {
		encryptYAML(recipients, in, out, yamlUpdate)
	} else {
		encrypt(recipients, in, out, armor)
	}
}

func encryptPass(pass string, in io.Reader, out io.Writer, armor, yaml, yamlUpdate bool) {
	r, err := age.NewScryptRecipient(pass)
	if err != nil {
		logFatalf("Error: %v", err)
	}
	encrypt([]age.Recipient{r}, in, out, armor)

	if yaml {
		encryptYAML([]age.Recipient{r}, in, out, yamlUpdate)
	} else {
		encrypt([]age.Recipient{r}, in, out, armor)
	}
}

func encrypt(recipients []age.Recipient, in io.Reader, out io.Writer, withArmor bool) {
	if withArmor {
		a := armor.NewWriter(out)
		defer func() {
			if err := a.Close(); err != nil {
				logFatalf("Error: %v", err)
			}
		}()
		out = a
	}
	w, err := age.Encrypt(out, recipients...)
	if err != nil {
		logFatalf("Error: %v", err)
	}
	if _, err := io.Copy(w, in); err != nil {
		logFatalf("Error: %v", err)
	}
	if err := w.Close(); err != nil {
		logFatalf("Error: %v", err)
	}
}

func encryptYAML(recipients []age.Recipient, in io.Reader, out io.Writer, update bool) {
	node := yaml.Node{}
	w := yage.Wrapper{
		Value:     &node,
		NoDecrypt: !update,
	}

	decoder := yaml.NewDecoder(in)
	encoder := yaml.NewEncoder(out)
	encoder.SetIndent(2)
	defer encoder.Close()

	var marshalOpts []yage.MarshalYAMLOption
	if update {
		marshalOpts = append(marshalOpts, yage.NoReencrypt())
	}

	for {
		err := decoder.Decode(&w)
		if err == io.EOF {
			break
		} else if err != nil {
			logFatalf("Error: %v", err)
		}

		// Encrypt the Nodes with the !crypto/age tag
		encNode, err := yage.MarshalYAML(&node, recipients, marshalOpts...)
		if err != nil {
			logFatalf("Error: %v", err)
		}

		err = encoder.Encode(&encNode)

		if err != nil {
			logFatalf("Error: %v", err)
		}
	}
}

func addOpenSSHIdentities(identities *[]age.Identity) {
	// If they exist and are well-formed, load the default SSH keys. If they are
	// passphrase protected, the passphrase will only be requested if the
	// identity matches a recipient stanza.
	for _, path := range []string{
		os.ExpandEnv("$HOME/.ssh/id_rsa"),
		os.ExpandEnv("$HOME/.ssh/id_ed25519"),
	} {
		content, err := os.ReadFile(path)
		if err != nil {
			continue
		}
		ids, err := parseSSHIdentity(path, content)
		if err != nil {
			// If the key is explicitly requested, this error will be caught
			// below, otherwise ignore it silently.
			continue
		}
		*identities = append(*identities, ids...)
	}
}

func decrypt(keys []string, in io.Reader, out io.Writer) {
	identities := []age.Identity{
		// If there is an scrypt recipient (it will have to be the only one and)
		// this identity will be invoked.
		&LazyScryptIdentity{passphrasePrompt},
	}

	addOpenSSHIdentities(&identities)

	for _, name := range keys {
		ids, err := parseIdentitiesFile(name)
		if err != nil {
			logFatalf("Error reading %q: %v", name, err)
		}
		identities = append(identities, ids...)
	}

	rr := bufio.NewReader(in)
	if start, _ := rr.Peek(len(armor.Header)); string(start) == armor.Header {
		in = armor.NewReader(rr)
	} else {
		in = rr
	}

	r, err := age.Decrypt(in, identities...)
	if err != nil {
		logFatalf("Error: %v", err)
	}
	if _, err := io.Copy(out, r); err != nil {
		logFatalf("Error: %v", err)
	}
}

func decryptYAML(keys []string, in io.Reader, out io.Writer, discardNoTag bool) {
	identities := []age.Identity{
		// If there is an scrypt recipient (it will have to be the only one and)
		// this identity will be invoked.
		&LazyScryptIdentity{passphrasePrompt},
	}

	addOpenSSHIdentities(&identities)

	for _, name := range keys {
		ids, err := parseIdentitiesFile(name)
		if err != nil {
			logFatalf("Error reading %q: %v", name, err)
		}
		identities = append(identities, ids...)
	}

	node := yaml.Node{}
	w := yage.Wrapper{
		Value:        &node,
		Identities:   identities,
		DiscardNoTag: discardNoTag,
	}

	decoder := yaml.NewDecoder(in)
	encoder := yaml.NewEncoder(out)
	encoder.SetIndent(2)

	for {
		err := decoder.Decode(&w)
		if err == io.EOF {
			break
		} else if err != nil {
			logFatalf("Error: %v", err)
		}

		err = encoder.Encode(&node)

		if err != nil {
			logFatalf("Error: %v", err)
		}
	}

	encoder.Close()
}

func passphrasePrompt() (string, error) {
	pass, err := readPassphrase("Enter passphrase:")
	if err != nil {
		return "", fmt.Errorf("could not read passphrase: %v", err)
	}
	return string(pass), nil
}

func identitiesToRecipients(ids []age.Identity) ([]age.Recipient, error) {
	var recipients []age.Recipient
	for _, id := range ids {
		switch id := id.(type) {
		case *age.X25519Identity:
			recipients = append(recipients, id.Recipient())
		case *agessh.RSAIdentity:
			recipients = append(recipients, id.Recipient())
		case *agessh.Ed25519Identity:
			recipients = append(recipients, id.Recipient())
		case *agessh.EncryptedSSHIdentity:
			recipients = append(recipients, id.Recipient())
		case *EncryptedIdentity:
			r, err := id.Recipients()
			if err != nil {
				return nil, err
			}
			recipients = append(recipients, r...)
		default:
			return nil, fmt.Errorf("unexpected identity type: %T", id)
		}
	}
	return recipients, nil
}

type lazyOpener struct {
	name      string
	overwrite bool
	f         *os.File
	err       error
}

func newLazyOpener(name string, overwrite bool) io.WriteCloser {
	return &lazyOpener{name: name, overwrite: overwrite}
}

func (l *lazyOpener) Write(p []byte) (n int, err error) {
	if l.f == nil && l.err == nil {
		oFlags := os.O_WRONLY | os.O_CREATE
		perms := os.FileMode(0o660)

		if l.overwrite {
			stat, err := os.Stat(l.name)
			if err != nil {
				return 0, err
			}
			perms = stat.Mode()
			oFlags = oFlags | os.O_TRUNC
		} else {
			oFlags = oFlags | os.O_EXCL
		}

		l.f, l.err = os.OpenFile(l.name, oFlags, perms)
	}
	if l.err != nil {
		return 0, l.err
	}
	return l.f.Write(p)
}

func (l *lazyOpener) Close() error {
	if l.f != nil {
		return l.f.Close()
	}
	return nil
}

func logFatalf(format string, v ...interface{}) {
	log.Fatalf(format, v...)
}

func errorf(format string, v ...interface{}) {
	log.Printf("yage: error: "+format, v...)
	log.Fatalf("yage: report unexpected or unhelpful errors at https://github.com/sylr/yage/issues")
}

func warningf(format string, v ...interface{}) {
	log.Printf("yage: warning: "+format, v...)
}

func errorWithHint(error string, hints ...string) {
	log.Printf("yage: error: %s", error)
	for _, hint := range hints {
		log.Printf("age: hint: %s", hint)
	}
	log.Fatalf("yage: report unexpected or unhelpful errors at https://github.com/sylr/yage/issues")
}

func getModsVersion() (mods []string) {
	info, ok := debug.ReadBuildInfo()

	if !ok {
		return
	}

	for _, mod := range info.Deps {
		mods = append(mods, fmt.Sprintf("%s: %s", mod.Path, mod.Version))
	}

	return
}
